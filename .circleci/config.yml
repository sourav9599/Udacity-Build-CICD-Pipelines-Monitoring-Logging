version: 2.1
# commands:
#   destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#     id:
#         type: string
#         default: ${CIRCLE_WORKFLOW_ID:0:7}
#     steps:
#       - run:
#           name: Destroy environments
#           command: |
#             aws cloudformation delete-stack --stack-name "udapeople-backend-<<parameters.id>>"
#             aws cloudformation delete-stack --stack-name "udapeople-frontend-<<parameters.id>>"
#           when: on_fail

#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       # Add parameter here
#     steps:
#       - run:
#           name: Revert migrations
#           # Add when this will run
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS = 1
#             if(( $SUCCESS==1 ));
#             then
#             #  cd ~/project/backend
#             #  npm install
#             #  Add revert code here. You can find this in the Getting Started section.
#               exit 1
#             fi

jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["18:64:6e:f7:ec:53:a8:6a:d8:54:9a:5c:f3:8e:05:84"]
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end analyze
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
      # - run:
      #     name: Commit Audit Fixes to Repository
      #     command: |
      #       git config user.email "sourav10mohanty@gmail.com"
      #       git config user.name "CircleCI Job"
      #       git checkout main
      #       git commit --allow-empty -am "Audit fix frontend commit from CircleCI [skip ci]"
      #       ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
      #       git push origin main

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["18:64:6e:f7:ec:53:a8:6a:d8:54:9a:5c:f3:8e:05:84"]
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end analyze
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
      # - run:
      #     name: Commit Audit Fixes to Repository
      #     command: |
      #       git config user.email "sourav10mohanty@gmail.com"
      #       git config user.name "CircleCI Job"
      #       git checkout main
      #       git commit --allow-empty -am "Audit fix backend commit from CircleCI [skip ci]"
      #       ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
      #       git push origin main

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            touch inventory.txt
            echo [web] > inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> inventory.txt
            cp inventory.txt .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: .circleci/ansible
          paths:
            - inventory.txt

      # - destroy_environment

  configure-infrastructure:
    docker:
      - image: cimg/base:edge
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["1a:64:bc:3f:74:a0:a8:df:fe:95:ef:49:61:58:6d:a8"]
      - attach_workspace:
          at: .circleci/ansible
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install tar gzip
            sudo apt install software-properties-common
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible
      - run:
          name: Configure server
          command: |
            ansible-playbook -i .circleci/ansible/inventory.txt configure-server.yml

      # - destroy_environment

#   run-migrations:
#     docker:
#       # Docker image here that supports NodeJS
#     steps:
#       # Checkout code from git
#       - run:
#           name: Run migrations
#           command: |
#             # Your code here
#             exit 1
#       - run:
#           name: Send migration results to memstash
#           command: |
#             # Your code here
#             exit 1
#      # Here's where you will add some code to rollback on failure

#   deploy-frontend:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#       - run:
#           name: Deploy frontend objects
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure

#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure

#   smoke-test:
#     docker:
#       # Lightweight Docker image
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
